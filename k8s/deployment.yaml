apiVersion: apps/v1
kind: Deployment
metadata:
  name: portfolio-app
  namespace: portfolio-demo
  labels:
    app: portfolio-app
    version: v1.0.0
    component: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: portfolio-app
  template:
    metadata:
      labels:
        app: portfolio-app
        version: v1.0.0
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/health"
    spec:
      containers:
      - name: portfolio-app
        image: portfolio-demo:latest
        imagePullPolicy: Never  # Dla lokalnego obrazu
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        env:
        # Zmienne z ConfigMap
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: portfolio-config
              key: APP_NAME
        - name: APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: portfolio-config
              key: APP_VERSION
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: portfolio-config
              key: ENVIRONMENT
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: portfolio-config
              key: FLASK_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: portfolio-config
              key: PORT
        # Zmienne z Secret
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: portfolio-secrets
              key: SECRET_KEY
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: portfolio-secrets
              key: API_KEY
        # Kubernetes-specific environment variables
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1000

